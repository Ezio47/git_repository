//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ManagerSystem.MVC.SMSServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SMSServiceReference.ISMService")]
    public interface ISMService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMService/DoWork", ReplyAction="http://tempuri.org/ISMService/DoWorkResponse")]
        string DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMService/DoWork", ReplyAction="http://tempuri.org/ISMService/DoWorkResponse")]
        System.Threading.Tasks.Task<string> DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMService/OpenPort", ReplyAction="http://tempuri.org/ISMService/OpenPortResponse")]
        bool OpenPort();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMService/OpenPort", ReplyAction="http://tempuri.org/ISMService/OpenPortResponse")]
        System.Threading.Tasks.Task<bool> OpenPortAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMService/ClosePort", ReplyAction="http://tempuri.org/ISMService/ClosePortResponse")]
        bool ClosePort();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMService/ClosePort", ReplyAction="http://tempuri.org/ISMService/ClosePortResponse")]
        System.Threading.Tasks.Task<bool> ClosePortAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMService/SendMsg", ReplyAction="http://tempuri.org/ISMService/SendMsgResponse")]
        bool SendMsg(string msg, string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISMService/SendMsg", ReplyAction="http://tempuri.org/ISMService/SendMsgResponse")]
        System.Threading.Tasks.Task<bool> SendMsgAsync(string msg, string phone);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISMServiceChannel : ManagerSystem.MVC.SMSServiceReference.ISMService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SMServiceClient : System.ServiceModel.ClientBase<ManagerSystem.MVC.SMSServiceReference.ISMService>, ManagerSystem.MVC.SMSServiceReference.ISMService {
        
        public SMServiceClient() {
        }
        
        public SMServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SMServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SMServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SMServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string DoWork() {
            return base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task<string> DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public bool OpenPort() {
            return base.Channel.OpenPort();
        }
        
        public System.Threading.Tasks.Task<bool> OpenPortAsync() {
            return base.Channel.OpenPortAsync();
        }
        
        public bool ClosePort() {
            return base.Channel.ClosePort();
        }
        
        public System.Threading.Tasks.Task<bool> ClosePortAsync() {
            return base.Channel.ClosePortAsync();
        }
        
        public bool SendMsg(string msg, string phone) {
            return base.Channel.SendMsg(msg, phone);
        }
        
        public System.Threading.Tasks.Task<bool> SendMsgAsync(string msg, string phone) {
            return base.Channel.SendMsgAsync(msg, phone);
        }
    }
}
