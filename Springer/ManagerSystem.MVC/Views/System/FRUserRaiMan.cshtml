@using ManagerSystemClassLibrary;
@using ManagerSystemSearchWhereModel;
@{
    ViewBag.Title = "责任区划管理";
    Layout = "~/Views/Shared/SharedMap/_LayoutMap.cshtml";

    //配置文件经纬度读取
    var lon = System.Configuration.ConfigurationManager.AppSettings["Longitude"];
    var lat = System.Configuration.ConfigurationManager.AppSettings["Latitude"];
    var maptype = System.Configuration.ConfigurationManager.AppSettings["mapType"];//地图类型
    var lonlatchange = System.Configuration.ConfigurationManager.AppSettings["lonLatChange"];//经纬度转换
    var lonlattype = System.Configuration.ConfigurationManager.AppSettings["lonLatType"];//经纬度转换--度分秒
    var lonlatstr = T_SYS_ORGCls.GetOrgLonLat(new T_SYS_ORGSW { ORGNO = SystemCls.getCurUserOrgNo() });//获取当前用户所处市县的经纬度
    var GYLUrl = System.Configuration.ConfigurationManager.AppSettings["GYLUrl"];//获取二维公益林地图发布地址
    if (!string.IsNullOrEmpty(lonlatstr))
    {
        lon = lonlatstr.Split(',')[0].ToString();
        lat = lonlatstr.Split(',')[1].ToString();
    }
    var ORGNO = SystemCls.getCurUserOrgNo();//获取当前用户所处市县的
    var ORGNOSub = "";
    if (!string.IsNullOrEmpty(ORGNO))
    {
        ORGNOSub = ORGNO.Substring(0, 6);
    }
    var LAYERNAME = T_SYS_ORG_EXTENDIDCls.getModel(new T_SYS_ORG_EXTENDID_SW { ORGNO = ORGNOSub }).GYLLAYERNAME;
}
@section Header{
    <link href="~/Content/MapStyle.css" rel="stylesheet" />
    <script src="~/Scripts/Springer.js"></script>
    <script src="~/Scripts/Springer/SpringerMapCommon.js"></script>
    @*<script src="~/Scripts/Springer/SpringerMap.js"></script>*@
    <style type="text/css">
        .layui-layer-title {
            height: 44px;
            background-color: rgb(229, 251, 233);
            line-height: 44px;
            padding-left: 15px;
        }

        .layui-layer-btn .layui-layer-btn0 {
            border-color: #fe9329;
            background-color: #fe9329;
            color: #fff;
        }

        .layui-layer-btn a {
            height: 28px;
            line-height: 28px;
            margin: 0 6px;
            padding: 0 15px;
            border: 1px solid #dedede;
            border-color: #fe9329;
            background-color: #fe9329;
            color: #fff;
            border-radius: 2px;
            font-weight: 400;
            cursor: pointer;
            text-decoration: none;
        }
    </style>



}

<script type="text/javascript">
    dojoConfig = {
        parseOnLoad: true,
        packages: [{
            name: 'bdlib',
            location: this.location.pathname.replace(/\/[^/]+$/, "") + "/js/bdlib"
        }]
    };
    var LAYERNAME='@LAYERNAME';
    var GYLUrl='@GYLUrl';
    var tiled;
    var intervalMethod;
    var configMaptype;//地图展示类型
    var lonlatchangeFlag="1";//是否地图偏移量
    var map, toolbar, graphicLayer, tb;
    var editToolbar;
    bevent=require("dojo/_base/event");
    require(["esri/map",
      "bdlib/GoogleLayer",
   "bdlib/TDTLayer",
   "bdlib/TDTAnnoLayer",
   "esri/layers/FeatureLayer",
   "esri/geometry/Point",
   "esri/symbols/SimpleFillSymbol",
   "esri/symbols/SimpleLineSymbol",
   "dojo/_base/Color", "dojo/_base/event","dojo/parser", "esri/toolbars/draw", "esri/symbols/SimpleMarkerSymbol", "esri/graphic", "esri/dijit/Scalebar", "esri/dijit/OverviewMap",
   "esri/toolbars/navigation", "dijit/registry", "esri/symbols/TextSymbol", "esri/dijit/HomeButton","esri/toolbars/edit",
   "dojo/domReady!"],
   function (Map, GoogleLayer,TDTLayer,TDTAnnoLayer, FeatureLayer, Point, SimpleFillSymbol, SimpleLineSymbol, Color,event, parser, Draw, SimpleMarkerSymbol, Graphic, Scalebar, OverviewMap, Navigation
       , registry, TextSymbol, HomeButton,Edit) {
       //  parser.parse();
       map = new Map("map", { logo:false, sliderStyle: "large" });
       this.map_type="img_c11";
       configMaptype=@maptype;
       //2 天地图
       if (@maptype=="2") {
           var basemap = new TDTLayer(this.map_type);
           map.addLayer(basemap);
           var annolayer = new TDTAnnoLayer();
           map.addLayer(annolayer);
       }
       else
       {
           var basemap = new GoogleLayer(this.map_type);
           map.addLayer(basemap);
       }

       var pt = new Point(parseFloat(@lon),parseFloat(@lat));
       map.centerAndZoom(pt, 13);

       nav = new esri.toolbars.Navigation(map);

       graphicLayer = new esri.layers.GraphicsLayer();
       map.addLayer(graphicLayer);

       //加载公益林
       function GYL(LAYERNAME) {
           tiled = new esri.layers.ArcGISDynamicMapServiceLayer(GYLUrl+LAYERNAME+"/MapServer"); 
       }
       function loadGYL(value) {
           if (value == "1") {
               map.addLayer(tiled);
           } else {
               map.removeLayer(tiled);
           }
       }
       //比例尺
       var scalebar = new Scalebar({
           map: map,
           attachTo: "bottom-center"
       });
       ////鹰眼
       //var overviewMapDijit = new OverviewMap({
       //    map: map,
       //    attachTo: "bottom-right",
       //    color: " #D84E13",
       //    visible: true,
       //    opacity: .40
       //});
       //overviewMapDijit.startup();
       //取最新经纬度定位
       //getLonLat("");
       ////给地图控件添加视图变化监听事件
       // dojo.connect(map, "onExtentChange", showExtent);
       //给地图控件添加载鼠标移动监听事件
       dojo.connect(map, "onMouseMove",function(evt){
           showChangeCoordinates(evt,'@lonlatchange','@lonlattype');
       });
       //给地图控件添加载鼠标拖拽监听事件
       dojo.connect(map, "onMouseDrag",function(evt){
           showChangeCoordinates(evt,'@lonlatchange','@lonlattype');
       });
       var btn = dojo.byId("dakai");
       var btn1 = dojo.byId("guanbi");
       dojo.connect(btn, "onclick", openGYL);
       dojo.connect(btn1, "onclick", closeGYL);
       //home
       //var home = new HomeButton({
       //    map: map
       //}, "HomeButton");
       //home.startup();
       //  GetFRRailPoints();
       tb = new esri.toolbars.Draw(map);
       dojo.connect(tb, "onDrawEnd", addToMap);
       createToolbar();


       function loadMap(value,maptype)
       {
           if (value=="2") {
               var basemap = new TDTLayer(maptype);
               map.addLayer(basemap);
               var annolayer = new  TDTAnnoLayer();
               map.addLayer(annolayer);
           }
           else
           {
               var basemap = new GoogleLayer(maptype);
               map.addLayer(basemap);
           }
       }
       //地图切换
       $('#switchmap').toggle(function () {
           this.map_type = "img_p";//地图
           $('#imgtype').attr('class', 'yxType');
           $('#imgname').text("影像");
           loadMap(configMaptype,this.map_type);
           $('#info2').css('color', 'red');
       },
       function () {
           this.map_type = "img_c11";//卫星
           $('#imgtype').attr('class', 'vecType');
           $('#imgname').text("地图");
           loadMap(configMaptype,this.map_type);
           if (configMaptype=="1") {
               lonlatchangeFlag="1";
           }
           else{
               lonlatchangeFlag="0";
           }
           $('#info2').css('color', 'white');
       }  );
       function openGYL() {
           $('#dakai').hide();
           $('#guanbi').show();
           GYL(LAYERNAME);
           loadGYL("1");
       }
       function closeGYL() {
           $('#guanbi').hide();
           $('#dakai').show();
           loadGYL("0");
       }
   });

   //编辑
   var firstzb="";
   var secondzb="";
   var zb="";
   function createToolbar() {
       var normalizedVal;
       GetFRRailPoints();
       editToolbar = new esri.toolbars.Edit(map);
       // Activate the toolbar when you click on a graphic
       var editingEnalble=false;
       var i=0;
       map.graphics.on("click", function(evt) {
           bevent.stop(evt);
           if (editingEnalble==false) {
               editToolbar.activate(esri.toolbars.Edit.EDIT_VERTICES ,evt.graphic);
               editingEnalble=true;
               $('#BtnSavePoints').attr("disabled","disabled");
           }
           else
           {
               editToolbar.deactivate();
               editingEnalble=false;
               $('#BtnSavePoints').removeAttr("disabled");
           }
           //console.info(evt.graphic.geometry.rings[0]);
           var strxy="";
           var rings=evt.graphic.geometry.rings[0];
           var convertType="";
           for (var i = 0; i < rings.length; i++) {
               if ('@maptype'=='2'||(rings[i][0].toString().split(".")[0].length<=3&&rings[i][1].toString().split(".")[0].length<=2)) {
                   if (!isNaN(rings[i][0]) && !isNaN(rings[i][1])) {
                       strxy += rings[i][0] + "," + rings[i][1] + "|";
                       convertType="1";
                   }
               }
               else
               {
                   if (!isNaN(rings[i][0]) && !isNaN(rings[i][1])) {
                       normalizedVal = new esri.geometry.xyToLngLat(rings[i][0], rings[i][1]);
                       strxy += normalizedVal[0] + "," + normalizedVal[1] + "|";
                       convertType="";
                   }
               }
           }
           var tt=$('#railtxt').text();
           var array=tt.split(';');
           for (var i in array ) {
               if (strxy==array[i].toString()) {
                   zb=strxy;
               }
           }
           if (zb=="") {
               firstzb=strxy;
           }
           else{
               firstzb=zb;
           }
           secondzb=strxy;
           var jwdstr="";
           for(var i=0;i<array.length;i++){
               if (array[i]!=null&&array[i]!="") {
                   if (array[i].toString()==firstzb.toString()) {
                       jwdstr+=secondzb+";";
                       zb=secondzb;
                   }
                   else{
                       jwdstr+=array[i].toString()+";";
                   }
               }
           }
           $('#railtxt').text(jwdstr);
           //计算线面的长度和面积
           GetLenthorAreaMdy(evt.graphic.geometry,convertType);
           $('#railtxt3').text("1");
       });
   }


   var firstzb1="";
   var secondzb1="";
   var zb1="";
   //修改时量算面积和长度方法：
   function GetLenthorAreaMdy(geometry,type) {//画图完毕后计算距离或者面积 type 1 为无需转经纬度坐标
       var unit="";
       if (geometry.type == "polyline") {
           var geo = new esri.geometry.webMercatorToGeographic(geometry);//投影坐标转84经纬度
           if (configMaptype=="2"||type=="1") {//2 为经纬度坐标的地图
               geo=geometry;
           }
           var Length =new esri.geometry.geodesicLengths([geo],esri.Units.METERS);

           var LengthStr=Length.toString();
           var tt1=LenthorAreaStr;
           var array1=tt1.split(';');
           for (var i in array1 ) {
               if (LengthStr==array1[i].toString()) {
                   zb1=LengthStr;
               }
           }
           if (zb1=="") {
               firstzb1=LengthStr;
           }
           else{
               firstzb1=zb1;
           }
           secondzb1=LengthStr;
           var jwdstr1="";
           var str="0";
           for(var i=0;i<array1.length;i++){
               if (array1[i]!=null&&array1[i]!="") {
                   if (array1[i].toString()==firstzb1.toString()) {
                       jwdstr1+=secondzb1+";";
                       zb1=secondzb1;
                       str=parseFloat(str)+parseFloat(secondzb1);
                       str=parseFloat(str).toFixed(2);
                   }
                   else{
                       jwdstr1+=array1[i].toString()+";";
                       str=parseFloat(str)+parseFloat(array1[i].toString());
                       str=parseFloat(str).toFixed(2);
                   }
               }
           }
           LenthorAreaStr=jwdstr1;
           map.infoWindow.setTitle("距离测量");
           unit="米";
           //str=parseFloat(parseFloat(str)+parseFloat(Length)).toFixed(2);
           map.infoWindow.setContent("当前线段长度： <strong>" +  parseFloat(LengthStr).toFixed(2) + unit+"</strong>"+"<br>总长度： <strong>" +  str + unit+"</strong>");
           map.infoWindow.show();
       }
       else if(geometry.type == "polygon") {
           var geo =new esri.geometry.webMercatorToGeographic(geometry);
           if (configMaptype=="2"||type=="1") {
               geo=geometry;
           }
           var Area = new esri.geometry.geodesicAreas([geo], esri.Units.SQUARE_METERS);
           var AreaStr1=parseFloat(Area/10000).toFixed(2);
           var AreaStr=(Area/10000).toString();
           var tt1=LenthorAreaStr;
           var array1=tt1.split(';');
           for (var i in array1 ) {
               if (AreaStr==array1[i].toString()) {
                   zb1=AreaStr;
               }
           }
           if (zb1=="") {
               firstzb1=AreaStr;
           }
           else{
               firstzb1=zb1;
           }
           secondzb1=AreaStr;
           var jwdstr1="";
           var str="0";
           for(var i=0;i<array1.length;i++){
               if (array1[i]!=null&&array1[i]!="") {
                   if (array1[i].toString()==firstzb1.toString()) {
                       jwdstr1+=secondzb1+";";
                       zb1=secondzb1;
                       str=parseFloat(str)+parseFloat(secondzb1);
                       str=parseFloat(str).toFixed(2);
                   }
                   else{
                       jwdstr1+=array1[i].toString()+";";
                       str=parseFloat(str)+parseFloat(array1[i].toString());
                       str=parseFloat(str).toFixed(2);
                   }
               }
           }
           LenthorAreaStr=jwdstr1;
           map.infoWindow.setTitle("面积测量");
           unit="公顷";
           //if (parseFloat(Area)<1000000) {
           //    map.infoWindow.setContent("面积： <strong>" + parseFloat(Area).toFixed(2) + "平方米 </strong>");
           //}
           //else
           //{
           //    map.infoWindow.setContent("面积： <strong>" +  parseFloat(Area/1000000).toFixed(2) + "平方公里 </strong>");
           //}
           map.infoWindow.setContent("当前所选面积： <strong>" + parseFloat(Area/10000).toFixed(2) + unit+"</strong>"+"<br>总面积： <strong>" + str + unit+"</strong>");
           map.infoWindow.show();
       }
       // create a text symbol
       var font = new esri.symbol.Font("20px", esri.symbol.Font.STYLE_NORMAL, esri.symbol.Font.VARIANT_NORMAL, esri.symbol.Font.WEIGHT_BOLDER);
       var textSymbol = new esri.symbol.TextSymbol("当前所选面积："+AreaStr1 + unit,font, new esri.Color("yellow"));
       var labelPointGraphic = new  esri.Graphic(geometry, textSymbol);
       // add the label point graphic to the map
       graphicLayer.clear();
       graphicLayer.add(labelPointGraphic);
       map.addLayer(graphicLayer);
   }
   //量算面积和长度方法：
   var str="0";
   var LenthorAreaStr="";
   function GetLenthorArea(geometry,type) {//画图完毕后计算距离或者面积 type 1 为无需转经纬度坐标
       var unit="";

       if (geometry.type == "polyline") {
           var geo = new esri.geometry.webMercatorToGeographic(geometry);//投影坐标转84经纬度
           if (configMaptype=="2"||type=="1") {//2 为经纬度坐标的地图
               geo=geometry;
           }
           var Length =new esri.geometry.geodesicLengths([geo],esri.Units.METERS);
           map.infoWindow.setTitle("距离测量");
           unit="米";
           str=parseFloat(Length).toFixed(2);
           //if (parseFloat(Length)<1000) {
           //    map.infoWindow.setContent("距离： <strong>" + parseFloat(Length).toFixed(2)+ "米 </strong>");
           //}
           //else
           //{
           //    map.infoWindow.setContent("距离： <strong>" +  parseFloat(Length/1000).toFixed(2)+ "千米 </strong>");
           //}
           map.infoWindow.setContent("距离： <strong>" +  str + unit+"</strong>");
           map.infoWindow.show();
       }
       else if(geometry.type == "polygon") {
           var geo =new esri.geometry.webMercatorToGeographic(geometry);
           if (configMaptype=="2"||type=="1") {
               geo=geometry;
           }
           var Area = new esri.geometry.geodesicAreas([geo], esri.Units.SQUARE_METERS);
           map.infoWindow.setTitle("面积测量");
           unit="公顷";
           str=parseFloat(parseFloat(str)+parseFloat(Area/10000)).toFixed(2);
           LenthorAreaStr=LenthorAreaStr+";"+(Area/10000);
           var Area1=parseFloat(Area/10000).toFixed(2);
           //if (parseFloat(Area)<1000000) {
           //    map.infoWindow.setContent("面积： <strong>" + parseFloat(Area).toFixed(2) + "平方米 </strong>");
           //}
           //else
           //{
           //    map.infoWindow.setContent("面积： <strong>" +  parseFloat(Area/1000000).toFixed(2) + "平方公里 </strong>");
           //}
           map.infoWindow.setContent("总面积： <strong>" + str + unit+"</strong>");
           map.infoWindow.show();
           var font = new esri.symbol.Font("20px", esri.symbol.Font.STYLE_NORMAL, esri.symbol.Font.VARIANT_NORMAL, esri.symbol.Font.WEIGHT_BOLDER);
           var textSymbol = new esri.symbol.TextSymbol("当前所选面积："+Area1 + unit,font, new esri.Color("yellow"));
       }
       // create a text symbol
       var labelPointGraphic = new  esri.Graphic(geometry, textSymbol);
       // add the label point graphic to the map
       graphicLayer.clear();
       graphicLayer.add(labelPointGraphic);
       map.addLayer(graphicLayer);
   }

   //加点
   var strxy1="";    //存储多次绘画的总经纬度集合
   function addToMap(geometry) {
       var panduan=$('#railtxt3').text();
       if (panduan=="1") {
           alert("请先保存修改内容，然后在添加")
           return false;
       }
       var arr=[];       //存多次画线的经纬度集合，arr[0]为第一次，arr[1]为第二次，..........
       var symbol;
       var normalizedVal;
       //map.graphics.clear();
       //$('#railtxt').text('');
       //console.info(geometry);
       //tb.deactivate();
       //map.showZoomSlider();
       switch (geometry.type) {
           case "point":
           case "multipoint":
               symbol = new esri.symbol.SimpleMarkerSymbol(esri.symbol.SimpleMarkerSymbol.STYLE_CROSS, 12, new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([255, 0, 0]), 2), new dojo.Color([0, 255, 0, 0.25]));
               break;
           case "polyline":
               symbol = new esri.symbol.SimpleLineSymbol();
               break;
           default:
               symbol = new esri.symbol.SimpleFillSymbol(esri.symbol.SimpleFillSymbol.STYLE_SOLID,new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_DASHDOTDOT,new dojo.Color([255, 0, 0]), 3), new dojo.Color([255, 255, 0, 0.25]));
               break;
       }
       var graphic = new esri.Graphic(geometry, symbol);
       map.graphics.add(graphic);
       //console.info(geometry.rings[0]);
       var rings=geometry.rings[0];
       var strxy="";
       for (var i = 0; i < rings.length; i++) {
           if ('@maptype'=='2') {
               strxy += rings[i][0] + "," + rings[i][1] + "|";
           }
           else
           {
               normalizedVal = new esri.geometry.xyToLngLat(rings[i][0], rings[i][1]);
               strxy += normalizedVal[0] + "," + normalizedVal[1] + "|";
           }
       }
       //计算线面的长度和面积
       GetLenthorArea(geometry,"");
       arr.push(strxy);    //存多次画线的经纬度集合，arr[0]为第一次，arr[1]为第二次，..........
       for (var i = 0; i < arr.length; i++) {
           strxy1 += arr[i] + ";" ;
       }
       var str=$('#railtxt2').text();
       $('#railtxt').text(strxy1+str);
       //SavePoints
       if ($('#railtxt').text()!="") {
           $('#BtnSavePoints').removeAttr("disabled");
       }
   }

   //保存采集点
   var arr=[];
   function SaveRailPoints() {
       var txt=$('#railtxt').text();
       if ($.trim(txt)=="") {
           layer.alert("未采集点！", { icon: 2 });
           return false;
       }
       $.ajax({
           type: "Post",
           url: "/System/SaveFRUserRot",
           data: { id:'@ViewBag.id', points:$('#railtxt').text(),type:'1' },
           dataType: "json",
           success: function (obj) {
               if (obj != null && obj.Success) {
                   map.graphics.clear();
                   GetFRRailPoints();
                   $('#railtxt').text('');
                   layer.msg(obj.Msg, { time: 2000 });
                   setTimeout("location.reload()",2000);
               }
               else {
                   layer.alert('保存采集点失败！', { icon: 5 });
               }
           }
       });

   }

   //删除采集点
   function deletePoint(hid,rodetype) {
       layer.confirm('是否删除该面?', { icon: 3, title: '提示' }, function (index) {
           $.ajax({
               type: "Post",
               url: "/System/DeleteFRUserRot",
               data: { hid:hid ,rodetype:rodetype,type: '1'},
               dataType: "json",
               success: function (obj) {
                   if (obj != null && obj.Success) {
                       clearPoylon();
                       layer.msg(obj.Msg, { time: 2000 });
                       $('#BtnRemove').attr("disabled", "disabled");
                       layer.alert('删除成功！', { icon: 6 });
                       setTimeout("location.reload()",2000);
                   }
                   else {
                       $('#BtnRemove').removeAttr("disabled");
                       layer.alert('删除点失败！', { icon: 5 });
                   }
               }
           });
           layer.close(index);
       });
   }
   //清除
   function removeDraw()
   {
       var hid=getQueryString("ID");
       deletePoint(hid,"1");
   }
   //获取url 值
   function getQueryString(name) {
       var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
       var r = window.location.search.substr(1).match(reg);
       if (r != null) return unescape(r[2]); return null;
   }

   //获取采集点
   var str1="";
   function GetFRRailPoints()
   {
       $.ajax({
           type: "Post",
           url: "/System/GetFRUserRots",
           data: { id:'@ViewBag.id',type: '1' },
           dataType: "json",
           success: function (obj) {
               if (obj != null && obj.Success) {
                   var data = obj.Data;
                   if (data!=null) {
                       var datalist=data.DataList;
                       var arr=[];
                       if (datalist.length>0) {
                           for (var j = 0; j < datalist.length; j++) {
                               var ring = [];
                               var ss=datalist[j];
                               var str="";
                               for (var i = 0; i < ss.length; i++) {
                                   var lng=ss[i].LONGITUDE;
                                   var lat=ss[i].LATITUDE;
                                   if (!isNaN(lng)&&!isNaN(lat)) {
                                       var latlng=new esri.geometry.Point(parseFloat(lng),parseFloat(lat));
                                       ring.push(latlng);
                                       str+=lng+","+lat+"|";
                                   }
                                   var polygonSymbol  = new esri.symbol.SimpleFillSymbol(esri.symbol.SimpleFillSymbol.STYLE_SOLID,new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_DASHDOTDOT,new dojo.Color([255, 0, 0]), 3), new dojo.Color([255, 255, 0, 0.25]));
                                   //获取面的点
                                   var polygon = new esri.geometry.Polygon(new esri.SpatialReference({wkid:4326}));
                                   polygon.addRing(ring);
                               }
                               arr.push(str);
                               var graphic = new esri.Graphic(polygon,polygonSymbol);
                               map.graphics.add(graphic);
                               var point = new esri.geometry.Point(parseFloat(ss[0].LONGITUDE), parseFloat(ss[0].LATITUDE));
                               map.centerAndZoom(point, 14);
                               //计算线面的长度和面积
                               GetLenthorArea(polygon,"1");
                               $('#BtnRemove').removeAttr("disabled");
                           }
                           for (var m = 0; m < arr.length; m++) {
                               str1=str1+arr[m]+";"
                           }
                           $('#railtxt').text(str1);
                           $('#railtxt2').text(str1);
                       }
                       else{
                           $('#BtnRemove').attr("disabled", "disabled");
                       }
                   }
               }
           }
       });
   }
   //采面
   function cjPoylon()
   {
       //map.infoWindow.hide();
       //graphicLayer.clear();
       //map.graphics.clear();
       tb.activate(esri.toolbars.Draw.FREEHAND_POLYGON);
       map.hideZoomSlider();
   }
   //清除面
   function clearPoylon()
   {
       map.infoWindow.hide();
       graphicLayer.clear();
       map.graphics.clear();
       $('#railtxt').text('');
   }
</script>
<div data-dojo-type="dijit.layout.ContentPane" id="map" data-dojo-props="region:'center'">
    <p id="railtxt" style="display:none"></p>
    <p id="railtxt2" style="display:none"></p>
    <p id="railtxt3" style="display:none"></p>
    <div class="rightNav">
        <input id="Button1" type="button" value="采面 " style="font-weight:bold;color:green;" onclick="cjPoylon();" />
        &nbsp;&nbsp;
        @*<input id="BtnClear" type="button" value="清除面 " style="font-weight:bold;color:green;" onclick="clearPoylon();" />
        &nbsp;&nbsp;*@
        <input id="BtnSavePoints" type="button" value="保存" style="font-weight:bold;color:green;" disabled="disabled" onclick="SaveRailPoints()" />
        &nbsp;&nbsp;
        <input id="BtnRemove" type="button" value="删除 " style="font-weight:bold;color:green;" disabled="disabled" onclick="removeDraw();" />
        &nbsp;&nbsp;
        <input id="BtnRefresh" type="button" value="刷新" style="font-weight:bold;color:green;" onclick=" window.location.reload();" />
        &nbsp;&nbsp;
        <input id="dakai" type="button" value="打开公益林" style="" />
        <input id="guanbi" type="button" value="关闭公益林" style="display:none" />
        @*<input id="BtnReturn" type="button" value="返回" style="font-weight:bold;color:green;" onclick="history.go(-1);" />*@
        &nbsp;&nbsp;
        @*<input type="image" src="~/Images/earth.ico" style="height:25px;" onclick="map.panLeft()" />
            &nbsp; &nbsp;
            <input type="image" src="~/Images/earth.ico" style="height:25px;" onclick="map.panRight()" />
            &nbsp; &nbsp;
            <input type="image" src="~/Images/earth.ico" style="height:25px;" onclick="full()" />
            &nbsp; &nbsp;
            <input type="image" id="zoomprev" src="~/Images/pre2.ico" style="height:25px;" onclick="pre()" />
            &nbsp; &nbsp;
            <input type="image" id="zoomnext" src="~/Images/next3.ico" style="height:25px;" onclick="next()" />
            &nbsp; &nbsp;
            <input type="image" src="~/Images/earth.ico" style="height:25px;" onclick="pan()" />
            &nbsp; &nbsp;
            <input type="image" src="~/Images/earth.ico" style="height:25px;" onclick="zoomin()" />
            &nbsp; &nbsp;
            <input type="image" src="~/Images/earth.ico" style="height:25px;" onclick="zoomout()" />*@
    </div>

    <p id="info2" class="bottomNav"></p>
    @*地图切换*@
    <div class="pub_path1" id="switchmap" style="position: absolute; bottom: 80px; right: 20px; z-index: 1100;">
        <div class="hoverType">
            <div class="map_top">
                <div class="vecType" id="imgtype"></div>
            </div>
            <div class="map_bom" id="imgname">地图</div>
        </div>
    </div>
</div>
